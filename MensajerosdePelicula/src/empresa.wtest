import destinos.*
import empresa.*
import mensajeros.*
import paquete.*
import transportes.*
//Test transportes
test "Comprobar peso de camion"{
	camion.setCantidadDeAcoplados(8)
	assert.equals(8*500,camion.peso())
}
test "Comprobar peso de bicicleta"{
	assert.equals(0,bicicleta.peso())
}
//Test Mensajeros
test "Peso total Roberto"{
	camion.setCantidadDeAcoplados(1)
	roberto.transporte(camion)
	assert.equals(590,roberto.pesoTotal())
}
test "Roberto puede llevar un paquete pago en un camion con un acoplado"{
	camion.setCantidadDeAcoplados(1)
	roberto.transporte(camion)
	paquete.pagar()
	assert.that(paquete.puedeSerEntregado(roberto,puenteDeBrooklin))
}
test "Neo con credito no puede entregar paquete que no esta pago en la matrix"{
	neo.cargarCredito()
	assert.notThat(paquete.puedeSerEntregado(neo,laMatrix))
}

//Test empresa
test "Inicialmente no tengo empleados"{
	assert.that(empresaMensajeria.mensajeros().isEmpty())
}
test "Agregar un empleado" {
	empresaMensajeria.contratarA(chuck)
	assert.that(empresaMensajeria.esEmpleado(chuck))
}
test "Despedir empleado"{
	empresaMensajeria.contratarA(chuck)
	empresaMensajeria.despedirA(chuck)
	assert.notThat(empresaMensajeria.esEmpleado(chuck))
}
test "Despedir a todos"{
	empresaMensajeria.contratarA(chuck)
	empresaMensajeria.contratarA(neo)
	empresaMensajeria.contratarA(roberto)
	empresaMensajeria.despedirTodos()
	assert.that(empresaMensajeria.mensajeros().isEmpty())
}
test "Verificar empleado"{
	empresaMensajeria.contratarA(chuck)
	assert.that(empresaMensajeria.esEmpleado(chuck))
}
test "Comprobar si es grande cuando cantidad de mensajeros mayor a 2"{
	empresaMensajeria.contratarA(chuck)
	empresaMensajeria.contratarA(neo)
	empresaMensajeria.contratarA(roberto)
	assert.that(empresaMensajeria.esGrande())
}
test "Peso de ultimo empleado"{
	empresaMensajeria.contratarA(chuck)
	assert.equals(empresaMensajeria.pesoUltimoMensajero(),chuck.pesoTotal())
}
//Falta testear puedeSerEntregado